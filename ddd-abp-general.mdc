---
description: 
globs: 
alwaysApply: false
---
```markdown
---
description: >
  Comprehensive General Rules for Part 1 of an ABP Framework & Domain-Driven Design (DDD) project.
  These guidelines ensure consistent, high-quality code that aligns with ABP best practices
  and the fundamentals of DDD as discussed in "Mastering ABP Framework".
globs:
  - "**/*.cs"
  - "**/*.csproj"
alwaysApply: false
---

# General ABP & DDD Rules (Part 1)

This ruleset outlines **general guidelines** for any ABP-based .NET solution applying Domain-Driven Design (DDD) concepts. It covers coding standards, architecture fundamentals, error handling, and high-level best practices that apply throughout your codebase. For domain-specific, application-layer, infrastructure, UI, and testing rules, see the corresponding `.mdc` files.

**Library Information:**
- **Name:** abp-general-rules
- **Tags:** abp, ddd, csharp, architecture, code-quality

---

## 1. Introduction

Building on the principles laid out in the *Mastering ABP Framework* book, these general rules provide a foundation for designing maintainable, scalable .NET applications using DDD. They address code organization, architectural patterns, performance considerations, security, and overall best practices.

---

## 2. Code Organization and Structure

### 2.1 Layered Architecture
- **Maintain Clear Boundaries:** Separate solution projects into Domain, Application, Infrastructure, and UI layers. Each layer should have a focused responsibility.
- **Enforce Dependency Flow:** Lower layers (Domain) must not depend on higher layers (UI). Use interfaces, abstractions, or event-driven communication if necessary.
- **Domain Model Integrity:** Keep business logic in the Domain layer. Avoid “anemic” domain models by pushing logic into entities or domain services, rather than application services.

### 2.2 Naming Conventions
- **Classes & Methods:** Use PascalCase (e.g., `OrderService`, `GetProducts()`).
- **Private Fields:** Use `_camelCase` with a leading underscore (e.g., `_orderRepository`).
- **Constants:** Use `UPPER_CASE_WITH_UNDERSCORES` for compile-time constants (e.g., `MAX_NAME_LENGTH`).
- **Projects & Namespaces:** Follow a hierarchical structure reflecting layers and modules (e.g., `CompanyName.ProjectName.Domain.Products`).

### 2.3 DRY (Don’t Repeat Yourself)
- **Shared Libraries:** Extract repeated logic into utility classes or modules within the Domain or Application layer as appropriate.
- **Avoid Code Duplication:** Reuse existing ABP modules/features rather than re-implementing similar functionality.

---

## 3. Common Patterns and Anti-Patterns

### 3.1 Design Patterns
- **Repository Pattern:** Use ABP’s generic repositories or custom repositories for data access.  
- **Specification Pattern:** Encapsulate domain queries in specifications (when complexity grows).
- **Factory/Builder:** Centralize creation logic to reduce duplication and maintain invariants.

### 3.2 Anti-Patterns to Avoid
- **Service Locator:** Always use constructor injection for dependencies.
- **God Objects:** Keep classes small and focused. Split large services into specialized classes.
- **Anemic Domain Model:** Push business rules and invariants into domain entities or domain services.

---

## 4. Performance Considerations

- **Database Queries:** Leverage EF Core’s eager or lazy loading thoughtfully to minimize excessive queries.
- **Caching:** Use ABP’s distributed cache for frequently accessed data; invalidate cache on critical data changes.
- **Async/Await:** Adopt async methods for I/O-bound operations to improve scalability.

---

## 5. Security Best Practices

- **Identity & Authorization:** Use ABP’s built-in Identity module and permission system. Keep authorization checks in application services or controllers.
- **Data Validation:** Enforce input validation with data annotations, FluentValidation, or ABP’s built-in validation. Never trust external input.
- **Exception Handling:** Rely on ABP’s global exception handling to produce user-friendly error messages without exposing sensitive details.

---

## 6. Testing & Maintainability

- **Unit Tests:** Keep them focused on domain logic, mocking external services and infrastructure.
- **Integration Tests:** Test real interactions (e.g., repositories, application services) using ABP’s test framework and local DB setups.
- **Continuous Integration (CI):** Integrate tests into your CI pipeline to ensure quick feedback on regressions.

---

## 7. Tooling & Environment

- **IDE & Extensions:** Use Visual Studio or JetBrains Rider with relevant ABP CLI tools. Keep ABP CLI updated for new templates and migrations.
- **Code Analysis & Style:** Enable Roslyn analyzers or StyleCop to automatically enforce naming, formatting, and potential bug detection.
- **Version Control:** Maintain a consistent branching strategy (e.g., GitFlow). Each layer’s changes should be tested before merging.

---

## 8. Examples

Below are brief code snippets illustrating valid and invalid approaches. Refer to the *Mastering ABP Framework* for more detailed examples and best practices.

### 8.1 Valid Example
<example>
```csharp
// A well-structured Product entity in the Domain layer.
public class Product : FullAuditedAggregateRoot<Guid>
{
    public string Name { get; private set; }
    public decimal Price { get; private set; }

    // Enforce business logic via constructor or methods.
    public Product(string name, decimal price)
    {
        if (price < 0)
        {
            throw new BusinessException("Price cannot be negative.");
        }
        Name = name;
        Price = price;
    }

    // Domain method to update price with an invariant check.
    public void ChangePrice(decimal newPrice)
    {
        if (newPrice < 0)
        {
            throw new BusinessException("New price cannot be negative.");
        }
        Price = newPrice;
        // Additional domain logic...
    }
}
```
</example>

### 8.2 Invalid Example
<example type="invalid">
```csharp
// A domain entity with anemic design and no logic.
public class Product
{
    public Guid Id { get; set; }
    public string Name { get; set; }
    public decimal Price { get; set; }

    // Exposed settable properties allow misuse and bypass invariants.
    // No validations or business rules are enforced here.
}
```
</example>

---

## 9. Rationale

Applying these general rules ensures:
1. **Maintainability:** Proper layering, naming, and DDD reduce technical debt and improve clarity.
2. **Scalability:** Enforcing patterns like repositories, caching, and async processing fosters better performance.
3. **Security & Reliability:** Centralized exception handling, validation, and authorization keep the application robust.
4. **Team Alignment:** Consistent structure and coding styles make collaboration more efficient.

> **Note:** For more specific guidance, see the related `.mdc` files (Domain Layer, Application Layer, Infrastructure/Data Access, UI, and Testing) or consult the *Mastering ABP Framework* text for deeper dives into advanced scenarios.

---

**End of Rules File**