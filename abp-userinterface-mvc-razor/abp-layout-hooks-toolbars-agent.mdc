---
description:
globs:
alwaysApply: false
---
# ABP Layout Hooks and Toolbars Guidelines

## Critical Rules

- Use proper layout hooks for extending page layouts
- Implement toolbar items correctly using the toolbar system
- Apply proper layout hook naming conventions
- Use correct hook placement in layouts
- Implement proper toolbar item ordering
- Apply proper toolbar item visibility rules
- Use proper toolbar item event handling
- Implement proper layout hook registration

## Examples

<example>
```csharp
// Layout Hook Registration
public class MyLayoutHookProvider : LayoutHookContributor
{
    public override Task ConfigureLayoutAsync(LayoutHookContext context)
    {
        context.Add(
            LayoutHooks.Head.Last, // Hook point
            component: typeof(MyScriptsViewComponent)
        );

        return Task.CompletedTask;
    }
}

// Toolbar Configuration
public class MyToolbarContributor : IToolbarContributor
{
    public Task ConfigureToolbarAsync(IToolbarConfigurationContext context)
    {
        if (context.Toolbar.Name == StandardToolbars.Main)
        {
            context.Toolbar.Items.Insert(0, new ToolbarItem
            {
                Text = "Create Book",
                Icon = "fa fa-plus",
                RequiredPermissionName = "BookStore.Books.Create",
                Order = 1,
                Handler = "function() { createModal.open(); }"
            });
        }

        return Task.CompletedTask;
    }
}

// Page Layout Configuration
public class IndexModel : AbpPageModel
{
    public void OnGet()
    {
        PageLayout.Content.Title = "Books";
        PageLayout.Content.BreadCrumb.Add("Book Store");
        PageLayout.Content.MenuItemName = "BookStore";
    }
}
```
</example>

<example type="invalid">
```csharp
// Don't modify layout directly
public class IndexModel : PageModel // Don't use raw PageModel
{
    public IActionResult OnGet()
    {
        ViewBag.Title = "Books"; // Don't use ViewBag for layout
        return Page();
    }
}

// Don't inject content directly into layout
public class CustomLayoutMiddleware
{
    public async Task Invoke(HttpContext context)
    {
        // Don't modify layout HTML directly
        var content = await GetResponseBody(context);
        content = content.Replace("</head>", "<script src='custom.js'></script></head>");
    }
}
```
</example>
